import openai
import os
import subprocess
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar a API OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

def download_audio_from_youtube(video_url):
    """Baixa o √°udio de um v√≠deo do YouTube e converte para MP3."""
    try:
        output_path = "audio.mp3"

        # Baixar e converter o √°udio usando yt-dlp
        command = [
            "yt-dlp",
            "--extract-audio",
            "--audio-format", "mp3",
            "-o", output_path,
            video_url
        ]

        subprocess.run(command, check=True)
        print("üîπ √Åudio baixado e convertido para MP3 com sucesso!")
        return output_path

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao baixar ou converter o √°udio: {e}")
        return None

def transcribe_audio(file_path):
    """Faz a transcri√ß√£o do √°udio usando a API Whisper da OpenAI, sem precisar de idioma."""
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)  # Criar cliente da OpenAI

        with open(file_path, "rb") as audio_file:
            response = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file  # Remove `language`
            )

        print("‚úÖ Transcri√ß√£o conclu√≠da com sucesso!")
        return response.text  # Retorna o texto transcrito

    except Exception as e:
        print(f"‚ùå Erro ao transcrever o √°udio: {e}")
        return None

def delete_audio_file(file_path):
    """Exclui o arquivo de √°udio ap√≥s a execu√ß√£o."""
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"üóë Arquivo de √°udio {file_path} exclu√≠do com sucesso!")
        else:
            print(f"‚ö† O arquivo {file_path} n√£o foi encontrado.")
    except Exception as e:
        print(f"‚ùå Erro ao excluir o arquivo de √°udio: {e}")
